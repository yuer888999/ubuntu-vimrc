" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

runtime! debian.vim

" Vim will load $VIMRUNTIME/defaults.vim if the user does not have a vimrc.
" This happens after /etc/vim/vimrc(.local) are loaded, so it will override
" any settings in these files.
" If you don't want that to happen, uncomment the below line to prevent
" defaults.vim from being loaded.
" let g:skip_defaults_vim = 1

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"filetype plugin indent on

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

" __  ____   __  _   ___     _____ __  __ ____   ____
"|  \/  \ \ / / | \ | \ \   / /_ _|  \/  |  _ \ / ___|
"| |\/| |\ V /  |  \| |\ \ / / | || |\/| | |_) | |
"| |  | | | |   | |\  | \ V /  | || |  | |  _ <| |___
"|_|  |_| |_|   |_| \_|  \_/  |___|_|  |_|_| \_\\____|


" Author: @jade
" Checkout-list
" vim-esearch

" ===
" === Auto load for first time uses
" ===

" ===
" === Vim
" ===
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" ===
" === Neovim
" ===
if empty(glob('~/.config/nvim/autoload/plug.vim'))
	silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
				\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

"******************自定义vim*****************************************
"********* ==> 编码设置 <== *********
" 设置文件编码格式
set encoding=utf-8
set fileencodings=utf-8,chinese,latin-1,gbk,gb18030,gk2312
if has("win32")
 set fileencoding=chinese
else
 set fileencoding=utf-8
endif

"设置终端编码"
set termencoding=utf-8

"设置语言编码"
set langmenu=zh_CN.UTF-8
set helplang=cn

"解决菜单乱码
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

"解决consle提示信息输出乱码
language messages zh_CN.utf-8

"********* ==> 全局设置 <== *********
"开启256配色
set t_Co=256

"设置背景为黑色
set background=dark

"关闭vi兼容模式
 set nocompatible

"保留历史历史
set history=1000

"检测插件类型
filetype plugin on

"实现全能补全功能，需要打开文件类型检测
filetype plugin indent on

"打开vim的文件类型自动检测功能
filetype on

"开启文件类型检查，并且载入与该类型对应的缩进规则
filetype indent on

"当文件在外部被修改时，自动更新该文件"
set autoread

"开启鼠标功能
set mouse=a
set selection=exclusive
set selectmode=mouse,key

"保存全局变量"
set viminfo+=!

"按F2进入粘贴模式
set pastetoggle=<F2>

"设置高亮搜索,*往下搜索 #往上搜索
set incsearch
set hlsearch
"取消高亮搜索
"set hl

"设置滚动条到底行距离
set scrolloff=3

"直接复制粘贴系统剪贴板内容
set clipboard=unnamed

"关闭swap文件
set noswapfile

"开启新行时使用智能自动缩进"
set smartindent
set cin
set showmatch

"********* ==> 窗口 <== *********
"设置窗口行高
set lines=58

"设置行宽，即一行显示多少个字符
set textwidth=88

"设置行间距
set linespace=8

"添加行滚动条
set guioptions+=b

"指定折行处与编辑窗口的右边缘之间的字符数
set wrapmargin=8

"光标遇到圆括号，方括号，大括号时，自动高亮对应的另一个圆括号，方括号和大括号
set showmatch

"********* ==> 状态栏  <== *********
"设置行号
set number

"显示光标所在的当前行的行号，其它行都为相对于该行的相对行号
set relativenumber

"打开状态栏标尺
set ruler

"设置行号宽带
set numberwidth=3

" 总是显示状态行
set laststatus=2

" 状态栏显示目前所执行的指令
"set showcmd

" 命令行（在状态行下）的高度，默认为1，这里是2
set cmdheight=2

"设置显是显示标签栏
set showtabline=2

"设置不显示模式
set noshowmode

"隐藏工具栏"
"set guioptions-=T

"隐藏菜单栏"
"set guioptions-=m


"隐藏菜单栏"
set guioptions-=m
set guioptions+=m   "可以显示菜单栏

"********* ==> 文件字体和颜色设置 <== *********
"修改颜色
"colorscheme evening

"设置代码高亮
syntax enable
" 或者 set syntax=on

"设置光标颜色
highlight Cursor ctermfg=158 ctermbg=168
hi LineNr ctermbg=58 ctermfg=255

" term                        黑白终端的显
" cterm                       彩色终端的显
" ctermfg                     彩色终端的前
" ctermbg                     彩色终端的背
" gui                         GUI的显示属
" guifg                       GUI的前景色
" giobg                       GUI的背景色

"显示所在的当前行高亮
set cursorline "set cul
"当前行高亮颜色
hi CursorLine  term=bold cterm=bold ctermbg=118 ctermfg=128

"highlght 主要是用来配色的，包括语法高亮等个性化的配置。可以通过:h highlight，查看详细信息
"CursorLine 和 CursorColumn 分别表示当前所在的行列
"cterm 表示为原生vim设置样式，设置为NONE表示可以自定义设置。
"ctermbg 设置终端vim的背景色
"ctermfg 设置终端vim的前景色
"guibg 和 guifg 分别是设置gvim的背景色和前景色

"显示所在的当前列高亮
set cursorcolumn  "set cuc

"当前列高亮颜色
hi CursorColumn term=bold cterm=bold ctermbg=98 ctermfg=58

"设置括号匹配的颜色
hi MatchParen ctermbg=232 ctermfg=20 guibg=lightblue

"修改字体样式
"set guifont="Cascadia Code PL"\italic\18
set guifont="Ubuntu Mono derivative Powerline"

"********* ==>  代码折叠功能 <== *********
"激活折叠功能"
"set foldenable
"这个是关闭折叠功能
set nofen

"设置折叠方式
set foldmethod=indent

"设置为自动关闭折叠"
"set foldclose=all

"设置折行时整体
set linebreak

"********* ==>  文字处理 <== *********
"设置空白，和retab一起用
"使用空格来替换Tab
set expandtab

"按下tab键时，缩进为3个空格
set tabstop=3

"设置首行缩进
set shiftwidth=3

"按tab往后退格
set softtabstop=3
set smarttab

"按下回车健后，下一行的缩进会自动跟上一行的缩进保持一致
"可使用autoindent命令的简写，即“:set ai”和“:set noai”
set autoindent
set cindent

"智能缩进"
set si

"自动换行”
set wrap
"不自动折行，即太长为一行显示
"set nowrap

"设置软宽度"
set sw=4

"行内替换"
set gdefault

"********* ==> 文件搜索时状态 <== *********
"搜索时忽略大小写
set ignorecase
"set ic
"取消搜索时区分大小写
"set noic
"搜索时忽略大小写
set smartcase

"搜索逐字符高亮"
set hlsearch
set incsearch

"********* ==> 其它 <== *********
"设置魔术"
set magic

"关闭遇到错误时的声音提示"
"关闭错误信息响铃"
set noerrorbells

"关闭使用可视响铃代替呼叫"
set novisualbell

"置空错误铃声的终端代码"
set vb t_vb=

"***************************autocmd*******************************************************
"配置更新立即生效
:autocmd BufWritePost $MYVIMRC source $MYVIMRC

:autocmd WinEnter * setlocal cursorline
:autocmd WinLeave * setlocal nocursorline
:autocmd BufWritePre * :%s/\s\+$//e
autocmd bufwritepost .vimrc source $MYVIMRC

"用浅色高亮显示当前行"
autocmd InsertLeave * se nocul
autocmd InsertEnter * se cul

"***************************vim设置映射健**************************************************
"使用map就可以实现映射
"map系列命令有递归的风险
"vim提供了非递归映射，这些命令不会递归解释
"使用map对应的nnoremap/vnoremap/inoremap
":help key-notation映射健文档

"全局领导健
let mapleader=','

"本地领导健
let maplocalleader='\\'

"在可视模式下快速切换大小写
vmap \ U

"在normal模式下垂直分屏
:nnoremap <leader>v :vsplit $MYVIMRC<cr>

"在normal模式下水平分屏"
:nnoremap <leader>s :split $MYVIMRC<cr>

"在insert模式下保存文件
inoremap <leader>w <Esc>:w<cr>

"在normal模式下保存文件
nnoremap <leader>w :w<cr>

"按 ,vr 时更新vimrc文件
nnoremap <leader>vr :source $MYVIMRC<CR>
"nnoremap <leader>vr :source /etc/vim/vimrc<CR>

"却换buffer
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> [n :bnext<CR>

"使用 ctrl+h/j/k/l 切换window
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l


"*********************安装vim-plug插件管理器***************************
call plug#begin('~/.vim/plugged')
"call plug#begin()

"Plug 'mhinz/vim-startify'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'scrooloose/nerdtree'

Plug 'ctrlpvim/ctrlp.vim'

Plug 'tpope/vim-surround'

Plug 'mattn/emmet-vim'

Plug 'ap/vim-css-color'

Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'joom/vim-commentary'

Plug 'yggdroot/indentline'

Plug 'maksimr/vim-jsbeautify'












call plug#end()



"*********************vim-plug快捷键映射******************************
nnoremap <leader><leader>i :PlugInstall<cr>
nnoremap <leader><leader>u :PlugUpdate<cr>
nnoremap <leader><leader>g :PlugUpgrade<cr>
nnoremap <leader><leader>c :PlugClean<cr>
nnoremap <leader><leader>s :PlugStatus<cr>


"*********************vim-startify配置*********************************




"*********************vim-airline配置**********************************
"开启powerline字体
let g:airline_powerline_fonts = 1

"开启top-tab
let g:airline#extensions#tabline#enabled = 1

 "设置切换Buffer快捷键"
 nnoremap <S-N> :bn<CR>
 nnoremap <S-P> :bp<CR>

let g:airline_theme="luna"
"let g:airline_theme="bubblegum"

let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

"*********************nerdtree配置************************************
"nerdtree-configuration-files
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

"关闭Press? for help
let NERDTreeMinimalUI = 1

"退出后自动关闭NERDTree侧边栏
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

"如何更改默认箭头？
let g:NERDTreeDirArrowExpandable = '>'
let g:NERDTreeDirArrowCollapsible = '^'

"右边显示nerdtree
let NERDTreeWinPos="right"

"启动时开启nerdtree
"autocmd VimEnter * NERDTree



"*********************ctrlp配置************************************************
"ctrlp-configuration files
let g:ctrlp_map = '<c-p>'
"let g:ctrlp_cmd = 'ctrlP'

"vim-surround配置
"vim-surround-configuration-files
"ds(delete a surrounding) #ds delete
"cs(change a surrounding) #cs ( [
"ys(you add a surrounding) #ys iw character
"emmet-vim配置
"在所有模式下启用emmet
let g:user_emmet_mode='n'
let g:user_emmet_mode='inv'
let g:user_emmet_mode='a'

"仅支持html/css
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

"从新指定触发键
let g:user_emmet_leader_key=','

"********************coc-nvim配置***********************************
"coc全局设置
let g:coc_global_extensions = ["coc-json","coc-vimlsp","coc-tsserver","coc-eslint"]

set encoding=utf-8

set hidden

set updatetime=100

if has("nvim-0.5.0") || has("patch-8.1.1564")
  set signcolumn=number
else
  set signcolumn=yes
endif


" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>


"coc绑定快捷键
nnoremap <silent> <space>g :<C-u>CocList --normal gstatus<CR>

"跳到上/下一个地址绑定快捷键
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>


"********************yggdroot/indentline配置************************
let g:indentLine_setColors = 0

let g:indentLine_color_term = 239

let g:indentLine_bgcolor_gui = '#FFD700'

let g:indentLine_char_list = ['|', '¦', '┆', '┊']

let g:indentLine_color_gui = '#FF00FF'



"********************maksimr/vim-jsbeautify配置***********************
".vimrc
map <c-f> :call JsBeautify()<cr>
" or
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
" for json
autocmd FileType json noremap <buffer> <c-f> :call JsonBeautify()<cr>
" for jsx
autocmd FileType jsx noremap <buffer> <c-f> :call JsxBeautify()<cr>
" for html
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
" for css or scss
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>

".vimrc
autocmd FileType javascript vnoremap <buffer>  <c-f> :call RangeJsBeautify()<cr>
autocmd FileType json vnoremap <buffer> <c-f> :call RangeJsonBeautify()<cr>
autocmd FileType jsx vnoremap <buffer> <c-f> :call RangeJsxBeautify()<cr>
autocmd FileType html vnoremap <buffer> <c-f> :call RangeHtmlBeautify()<cr>
autocmd FileType css vnoremap <buffer> <c-f> :call RangeCSSBeautify()<cr>










